{
  "%DEFINE": "4.4.1. %DEFINE statement .................................................................... 179 4.4.1.1. Description ......................................................................... 179 4.4",
  "%INCLUDE": "4.4.2. %INCLUDE statement ................................................................. 180 4.4.2.1. Description ......................................................................... 180 4.4.2",
  "%CONTINUE": "4.4.3. %CONTINUE statement .............................................................. 181 4.4.3.1. Description ......................................................................... 181 4.4.3.2",
  "%LET": "4.4.4. %LET statement .......................................................................... 181 4.4.4.1. Description ......................................................................... 181 ",
  "%PARAM": "4.4.5. %PARAM statement .................................................................... 182 4.4.5.1. Description ......................................................................... 182 4.4.",
  "%P": "4.4.6. %Param - Informats ..................................................................... 184 4.5. Step statements ...............................................................................",
  "%DO": "4.7.1. %DO WHILE...%LOOP WHILE ................................................... 262 4.7.1.1. Description ......................................................................... 262 4.7.1.2. Synta",
  "%LOOP": "4.7.1. %DO WHILE...%LOOP WHILE ................................................... 262 4.7.1.1. Description ......................................................................... 262 4.7.1.2. Synta",
  "%FOR": "4.7.2. %FOR...%NEXT .......................................................................... 263 4.7.2.1. Description ......................................................................... 263 4.",
  "%NEXT": "4.7.2. %FOR...%NEXT .......................................................................... 263 4.7.2.1. Description ......................................................................... 263 4.",
  "%IF": "4.7.3. %IF...%THEN...%END ................................................................. 264 4.7.3.1. Description ......................................................................... 264 4.7.3",
  "%THEN": "4.7.3. %IF...%THEN...%END ................................................................. 264 4.7.3.1. Description ......................................................................... 264 4.7.3",
  "%END": "4.7.3. %IF...%THEN...%END ................................................................. 264 4.7.3.1. Description ......................................................................... 264 4.7.3",
  "%SELECT": "4.7.4. %SELECT... %WHEN... %THEN... %END .................................. 265 4.7.4.1. Description ......................................................................... 265 4.7.4.2. Syntax .....",
  "%WHEN": "4.7.4. %SELECT... %WHEN... %THEN... %END .................................. 265 4.7.4.1. Description ......................................................................... 265 4.7.4.2. Syntax .....",
  "%WHILE": "4.7.5. %WHILE...%END ......................................................................... 266 4.7.5.1. Description ......................................................................... 266 4.",
  "%DEBUG": "4.12.6. The variable: %DEBUG ............................................................. 321 4.12.6.1. Description ....................................................................... 321 4.12.6.",
  "%OUTPUTLOG": "5.9.1. PROC EFRONTIMPORT_AJX - %OUTPUTLOG ....................... 403 5.9.1.1. Goal ................................................................................... 403 5.9.1.2. Features being illu",
  "%ELSE": "9.4. %ELSE ................................................................................................... 904 9.5. %ELSEIF ........................................................................",
  "%ELSEIF": "9.5. %ELSEIF ............................................................................................... 905 9.6. %END .............................................................................",
  "%EXIT": "9.7. %EXIT %DO .......................................................................................... 907 9.8. %EXIT %FOR ..........................................................................",
  "%TO": "9.17. %TO ..................................................................................................... 917 9.18. %WHILE .......................................................................",
  "%REPORT_DATE": "\u2022 If you define the %REPORT_DATE macro, the date to be used is the value of the variable %DATE, otherwise the system uses the current date. \u2022 If you define the %USE_DRAFT, draft transactions are used ",
  "%DATE": "variable %DATE, otherwise the system uses the current date. \u2022 If you define the %USE_DRAFT, draft transactions are used by the calculation engine, otherwise they are ignored.",
  "%USE_DRAFT": "\u2022 If you define the %USE_DRAFT, draft transactions are used by the calculation engine, otherwise they are ignored. \u2022 If you define a value for the variable %CE_CURRENCY , this value will be used as",
  "%CE_CURRENCY": "\u2022 If you define a value for the variable %CE_CURRENCY , this value will be used as currency (ex.: 'EUR', 'USD'). \u2022 If you define the %USE_INVESTEE_CURR, calculations are done in investee",
  "%USE_INVESTEE_CURR": "\u2022 If you define the %USE_INVESTEE_CURR, calculations are done in investee currency, otherwise calculations are done in investor currency. \u2022 If you define the %CALCULATE_SHARES macro, the ghost transac",
  "%CALCULATE_SHARES": "\u2022 If you define the %CALCULATE_SHARES macro, the ghost transactions integrate the number of diluted investment instruments. 4.1.5.6. Output",
  "%T": "%FOR %T %IN (%folder_name) TRACE %T; %NEXT;",
  "%IN": "%FOR %T %IN (%folder_name) TRACE %T; %NEXT;",
  "%IQID": "(IQID=%IQID TODATE=TODAY()) Note: You need to use the internal / program name of the parameter! 4.1.23.4. Parameters to be passed along with standard libraries",
  "%DASHBOARD_CURRENCY": "REFCURRENCY=%DASHBOARD_CURRENCY) Note: You need to use the internal / program name of the parameter!",
  "%USE_INVESTOR_CURR": "\u2022 If you define the %USE_INVESTOR_CURR, calculations are done in investor currency, otherwise calculations are done in fund currency. eFront Script Reference Guide - V21.0",
  "%START_DATE": "\u2022 If you define the %START_DATE, the system will take the value defined for the start date, and perform calculations for all the fund operations up from this date. 4.1.26.6. Output",
  "%TODATE": "FILTER= (DATE <= %TODATE) FILTER= (DATE <= %TODATE PORTFOLIO=%allPortfolios) mandatory;",
  "%I": "\u2022 When using %FOR %I%TO, you don't necessarily need to declare %I beforehand, eFront Script creates it dynamically. Ex.: %FOR %I=1%TO 10. \u2022 You can nest %IF, %DO, and %FOR loops.",
  "%OTHERWISE": "%OTHERWISE </ subordinate statements>; %END; %END;",
  "%WHLE": "false the first time it is evaluated, the %WHLE loop does not iterate even once. 4.7.5.2. Syntax %WHILE <condition>",
  "%MYVAR": "PUT %MYVAR; RUN; 4.9.3. Functions - dates",
  "%EDATE": "(DATEADD(\"WEEK,-1,%EDATE)); Substracts One week from date %EDATE eFront Script Reference Guide - V21.0",
  "%MERGED_FILE": "PROC PRINT; PUT %MERGED_FILE; RUN; Result: All pages from Document2.pdf are appended",
  "%M": "%MyProfileName; GETCURRENTUSER PROFILESLIST()",
  "%LANGUAGE": "PUT %LANGUAGE; RUN; %LET LANGUAGE =",
  "%CONTACTS": "FOR ID IN (%CONTACTS) OUTPUT; INDEX=INDEX+1;",
  "%PARAM_NAME1": "NAME = %PARAM_NAME1; OUTPUT; // Write a line in the table COL1 = \"Second line\";",
  "%PARAM_NAME2": "NAME = %PARAM_NAME2; OUTPUT; // Write another line in the table eFront Script Reference Guide - V21.0",
  "%INS": "INSTRUMENT=%INS; OUTPUT; RUN;",
  "%SCENARIO_TYPE_NAME": "%SCENARIO_TYPE_NAME & \"'\"; COLUMN DEFINITION TYPE = \"STRING\"; %LET DEFINTIION = DEFINITION;",
  "%DEFINTIION": "PROC EFRONTBLOB BLOB=%DEFINTIION PATH=PERIODDEFINITON FORMAT=\"COLLECTION\" OUT=WORK.TEST; RUN;",
  "%PROPERTIES": "ID=\"6D4B5DF1BB6647619A6E5FA2EBAFC197\" PROPERTIES=%PROPERTIES; RUN; 5.7.1.4. Comment",
  "%LETPROPERTIES": "%LETPROPERTIES = \"Cutoffdate=\" & %Date; PROC EFRONTFOLDER FOLDER=\"F_AJXPECFSCENARIO\" ID=%IQID_Scenario PROPERTIES=%Properties;",
  "%D": "%LETPROPERTIES = \"Cutoffdate=\" & %Date; PROC EFRONTFOLDER FOLDER=\"F_AJXPECFSCENARIO\" ID=%IQID_Scenario PROPERTIES=%Properties;",
  "%IQID_S": "PROC EFRONTFOLDER FOLDER=\"F_AJXPECFSCENARIO\" ID=%IQID_Scenario PROPERTIES=%Properties; RUN;",
  "%DIRECTORY": "%LET FILE_PATH = %DIRECTORY & \"\\bloomberg.xls\"; TRACE %FILE_PATH; DATA WORK.T;",
  "%FILE_PATH": "TRACE %FILE_PATH; DATA WORK.T; INFILE \"C:\\TMP\\BLOOMBERG.XLS\" AREAS=\"C7:C999;J2;A7:A999;J7:J999\";",
  "%BULK_EXPORT_FILE1": "FILE=%BULK_EXPORT_FILE1 NOHEADER SEMICOLUMN; RUN; 5.12.1.4. Result",
  "%STARTDATE": "FORMAT(%STARTDATE, \"ddmmyyyy\") & \"_\" & FORMAT(%ENDDATE, \"ddmmyyyy\") & \".TXT\"; //Export the data table",
  "%ENDDATE": "FORMAT(%STARTDATE, \"ddmmyyyy\") & \"_\" & FORMAT(%ENDDATE, \"ddmmyyyy\") & \".TXT\"; //Export the data table",
  "%FILENAME_TAB": "FILE=%FILENAME_TAB TAB; RUN; 5.12.2.4. Result",
  "%CURRENT_DATE": "%LET DATE_STAMP = FORMAT(%CURRENT_DATE,\"yyyy-MM-dd-HHmmss\"); //Export the temporary data table and create an CSV file on the server PROC EXPORT DATA=WORK.FX_RATES COMMA DROP NOHEADER LABEL",
  "%EXPORT_PATH": "FILE=%EXPORT_PATH &%INSTANCE & %FILE_NAME & %M_T & %DATE_STAMP & %EXPORT_FORMAT; RUN;",
  "%INSTANCE": "FILE=%EXPORT_PATH &%INSTANCE & %FILE_NAME & %M_T & %DATE_STAMP & %EXPORT_FORMAT; RUN;",
  "%FILE_NAME": "FILE=%EXPORT_PATH &%INSTANCE & %FILE_NAME & %M_T & %DATE_STAMP & %EXPORT_FORMAT; RUN;",
  "%M_T": "FILE=%EXPORT_PATH &%INSTANCE & %FILE_NAME & %M_T & %DATE_STAMP & %EXPORT_FORMAT; RUN;",
  "%DATE_STAMP": "FILE=%EXPORT_PATH &%INSTANCE & %FILE_NAME & %M_T & %DATE_STAMP & %EXPORT_FORMAT; RUN;",
  "%EXPORT_FORMAT": "& %EXPORT_FORMAT; RUN; TRACE \"FX Rates Extracted\";",
  "%UNDEFINE": "%UNDEFINE CURRENT_DATE; %UNDEFINE FILTER_LAST_EXTRACT; %UNDEFINE LAST_EXTRACT_DATE;",
  "%SOURCE_CCY": "DESC = %SOURCE_CCY&\" to \"&CURRENCY1; //input parameters START_DATE = %START_DATE;",
  "%END_DATE": "END_DATE = %END_DATE; //automatically create image names from sheet names, which are named by cross pair names",
  "%NETPATH": "PROC EXPORTEXCEL FILE = CSTR(%NETPATH) DROP; TABLE = work.T_HV_FUND_USERCURR_LIGHT SHEETNAME = \"FIA_T_FUND_TRANSACTIONS\"",
  "%PORTFOLIO_ID": "TABLE=\"CFFPortfolio.PortfolioCashflows\" (IQID=%PORTFOLIO_ID TODATE=%ACTUAL_END_DATE); RUN;",
  "%ACTUAL_END_DATE": "TODATE=%ACTUAL_END_DATE); RUN; 5.15.2.4. Comments",
  "%R": "TODATE=%Reference_Date REFCURRENCY=%Currency); RUN; 5.15.3.4. Comments",
  "%C": "TODATE=%Reference_Date REFCURRENCY=%Currency); RUN; 5.15.3.4. Comments",
  "%FUND_ID": "PROC FAQUERY QUERY=\"DEALS\\TestQB\"(IQID=%FUND_ID); TABLE \"default\"(COLUMNS = COL2 COL4) OUT=Work.test; TABLE %QUERY_NAME OUT=Work.test2;",
  "%QUERY_NAME": "TABLE %QUERY_NAME OUT=Work.test2; RUN; PROC PRINT DATA=WORK.TEST;",
  "%ASATDATE": "%ASATDATE >= DATE); RUN; ...",
  "%PORT_ID": "SET T_CF_DATACUBE_PORTFOLIO (WHERE PORTFOLIO_IQID IN (%PORT_ID)); //TO CONVERT VALUES INTO STRING TO GIVE NEGATIVES () INSTEAD OF - SIGN COLUMN CASH_IN_CON TYPE=DOUBLEFORMAT=p_money.;",
  "%X_MEAN": "SUP = (X - %X_MEAN) * (Y - %Y_MEAN); INF_X = (X - %X_MEAN) * (X - %X_MEAN); INF_Y = (Y - %Y_MEAN) * (Y - %Y_MEAN);",
  "%Y_MEAN": "SUP = (X - %X_MEAN) * (Y - %Y_MEAN); INF_X = (X - %X_MEAN) * (X - %X_MEAN); INF_Y = (Y - %Y_MEAN) * (Y - %Y_MEAN);",
  "%SUBSCRIBERS_ID": "(%SUBSCRIBERS_ID)); COLUMN LINE_COUNTER TYPE=INTEGER; LINE_COUNTER = _N_;",
  "%NB_LETTER": "%NB_LETTER = _N_; RUN; // for as many document you need to generate\u2026",
  "%COUNTER": "%FOR %COUNTER = 1 %TO %NB_LETTER DATA LETTER_OUTPUT.T_PARTNERS_INFO_PER_SUBSCRIBER (DROP=BUFFER BUFFER_NAME BUFFER_NAME2 BUFFER_RATE BUFFER_FORMAT",
  "%N": "%Next; eFront Script Reference Guide - V21.0 July 10, 2023",
  "%MY_STRING": "PUT %MY_STRING; RUN; 5.22.6.4. Result",
  "%F": "FILE = %FilePath TITLE = \"Call-February\" FUND = %Fund",
  "%B": "BATCH = %Batch; RUN; eFront Script Reference Guide - V21.0",
  "%PARAM_TYPE_DEFAULT": "\u2022 %PARAM_TYPE_DEFAULT \u2022 %PARAM - ??LOOKUP - ??XLOOKUPCODE \u2022 %PARAM - ??PICKID(SQL- query) - ??FILTER",
  "%EXECUTE_DATA_DO_WHILE": "%IF%EXECUTE_DATA_DO_WHILE %THEN %INCLUDE \"\\\\EFRONT_SUP.2(Private) \\TEST\\EXAMPLES\\Programs\\DATA_DO_WHILE\";",
  "%EXECUTE_DATA_COLUMN_OUTPUT": "%IF%EXECUTE_DATA_COLUMN_OUTPUT %THEN %INCLUDE \"\\\\EFRONT_SUP.2(Private) \\TEST\\EXAMPLES\\Programs\\DATA_COLUMN_OUTPUT\";",
  "%TEST": "TRACE %TEST %I; %LET I = %I-1; %IF %I = 3 %THEN",
  "%TABLE": "TITLE1 %TABLE; RUN; %NEXT;",
  "%C_INVESTMENTATCOST_PLUS": "IF INSTR(%C_INVESTMENTATCOST_PLUS,\";\" || TRIM(UCASE(TRANSACTION_TYPE)) || \";\") <> 0 THEN _OUTPUT_= TRUE;",
  "%L": "%Let ID = \"0744A17F0D3D44AE81ACBEE1DEB201C4\"; // Id of fund operation %FOR%I = 1 %TO(LINKFILES(%ID)) Trace FILENAME(%I); // Display in the log the filename. Useful to check if you found the",
  "%ID": "%FOR%I = 1 %TO(LINKFILES(%ID)) Trace FILENAME(%I); // Display in the log the filename. Useful to check if you found the right file.",
  "%FIRSTNAME": "R=%FIRSTNAME; I=0; eFront Script Reference Guide - V21.0",
  "%PREFIX": "PROC PRINT DATA = TEST.ALLFUNDS (WHERE (FUND LIKE (%PREFIX & \"%\"))) LABEL NOOBS; RUN;",
  "%EMZFUND": "INVESTOR_FUND_ID IN (%EMZFUND)); IF INSTR(%C_INVESTMENTATCOST_PLUS,\";\" || TRIM(UCASE(TRANSACTION_TYPE)) || \";\") <> 0 THEN",
  "%PARAM_IDFUND": "SET [SP_DW_TB].[EFFV_CDW_T_FUND](WHERE FUND_ID IN (%PARAM_IDFUND)); COLUMN FICHIER; COLUMN I TYPE=INTEGER;",
  "%X_DATE": "PUT FORMAT(%X_DATE, \"d/m/yyyy\"); 5.35.16.4. Result 5.35.17. %PARAM - ??LOOKUP - ??XLOOKUPCODE",
  "%LETFILE": "%LETFILE = GETTEMPPATH() & \"\\test.csv\"; //Export the temporary data table and create an CSV file on the server PROC EXPORT DATA=WORK.TMP DROP NOERROR FILE=%FILE NOHEADER",
  "%FILE": "PROC EXPORT DATA=WORK.TMP DROP NOERROR FILE=%FILE NOHEADER SEMICOLUMN; RUN;",
  "%USERID_1": "PUT \"Userid_1: \" & %USERID_1; PUT \"Userid: \" & %USERID; PUT \"User: \" & %USER;",
  "%USERID": "PUT \"Userid: \" & %USERID; PUT \"User: \" & %USER; PUT \"User country: \" & %USER_COUNTRY;",
  "%USER": "PUT \"User: \" & %USER; PUT \"User country: \" & %USER_COUNTRY; RUN;",
  "%USER_COUNTRY": "PUT \"User country: \" & %USER_COUNTRY; RUN; eFront Script Reference Guide - V21.0",
  "%PATH_TO_CHANGE": "Replace(Replace(LINKFILE(%I),%PATH_TO_CHANGE,%WEBSITE_URL),\"\\\",\"/\") & \"\"\">\" & FILENAME(%I) & \"</a>\"; Run;",
  "%WEBSITE_URL": "Replace(Replace(LINKFILE(%I),%PATH_TO_CHANGE,%WEBSITE_URL),\"\\\",\"/\") & \"\"\">\" & FILENAME(%I) & \"</a>\"; Run;",
  "%COMPANY_ID": "%Let List = %COMPANY_ID; %Include \"Empty List\"; %Undefine List;",
  "%U": "%Undefine List; DATA Work.T_Contact_Info; //SET Views.V_Contact;",
  "%A": "%LET Note_Date = %As_Of_Date; %INCLUDE \"P_Contact_Notes\"; %UNDEFINE Filter_Note_Date;",
  "%DAYSTOADD": "%LET MODDAYSTOADD=%DAYSTOADD-(5*CEILING(%DAYSTOADD/5)); TRACE %MODDAYSTOADD; //Calculate the correction to move past the weekend if necessary as a result of the",
  "%MODDAYSTOADD": "TRACE %MODDAYSTOADD; //Calculate the correction to move past the weekend if necessary as a result of the remainder days (derived above)",
  "%CORRECTION": "%STARTDATE+(7*CEILING(%DAYSTOADD/5))+%CORRECTION); // Trace the result TRACE %NEWDATE;",
  "%NEWDATE": "TRACE %NEWDATE; // This might be useful since you can easily use positive or negative \"DAYSTOADD\" and therefore move backwards and forwards at will.",
  "%SQL": "SQL %SQL; RUN; PROC PRINT DATA=ALLFUNDS;",
  "%GEO": "FILTER=(FREGION=%GEO); RUN; //For illustration purpose, print the cube",
  "%IQID_FOF_FUND": "\u2022 Set the variable %IQID_FOF_FUND to the invested fund IQID (collection or unique value). \u2022 Set the variable %IQID_MASTER_INVESTOR to the invested master fund IQID",
  "%IQID_MASTER_INVESTOR": "\u2022 Set the variable %IQID_MASTER_INVESTOR to the invested master fund IQID (collection or unique value). \u2022 If you define the FOF_INVESTOR_PORTFOLIO_REPORT macro, calculations are",
  "%IQID_FOF_INVESTOR": "\u2022 Set the variable %IQID_FOF_INVESTOR to the investor IQID (collection or unique value). \u2022 If you define the FOF_INVESTOR_REPORT macro, calculations are done on behalf",
  "%S": "STAKE_NC;%Stake{F}% d\u00e9tention OTHER_INCOME_OUTSIDE_OF_COMMITMENT;Other income outside of commitment{F}Autres revenues hors engagement",
  "%IQID_FUND": "//%LET IQID_INVESTOR = %IQID_FUND; // Fund direct positions in invested portfolio companies DATA T_DIRECT_INVESTMENT_POSITIONS(where INVESTMENT_ID<>\"\"); // to",
  "%IQID_COMPANY": "INVESTOR_ID IN (%IQID_COMPANY)); RUN; %LET COMPANY_LIST = COLLECTION(\"T_DIRECT_INVESTMENT_POSITIONS\",",
  "%SQL_QUERY": "SQL=%SQL_QUERY CONNECTION=\"DWH\"; RUN;",
  "WHERE": "WHERE(<condition>) Filters the data to be kept. To write the <condition>, use available Functions - Operators - Values.",
  "GETTEMPPATH": "GETTEMPPATH(), store the result in macro variables Mandatory; DROP",
  "CHOICE": "CHOICE(VAL1=Valeur 1,VAL2=Valeur 2)\"; INFORMAT= \"??XCHOICE(<id_1>=<value_1>, <id_n>=<value_n>)\"",
  "XCHOICE": "XCHOICE(VAL1=Valeur 1,VAL2=Valeur 2)\"; You can also use the DEFAULT option to defin checked by default:",
  "LOOKUPCODE": "LOOKUPCODE(<reference_table>.<additional_field)\" Applies to standard",
  "LOOKUP": "LOOKUP(<reference_table>.<additional_field)\" Applies to standard",
  "XLOOKUPCODE": "XLOOKUPCODE(<reference_table>.<additional_field)\" Applies to standard",
  "XLOOKUP": "XLOOKUP(<reference_table>.<additional_field)\" Applies to standard",
  "ERREUR": "ERREUR(0113): 'RUN' expected The RUN statement is missing. This error is most likely to occur when you use",
  "ABS": "ABS(<number>) Returns the absolute value of <number>. <number> = double",
  "ACOS": "ACOS(<number>) Returns the inverse cosine (arccosine) of <number>",
  "ASIN": "ASIN(<number>) Returns the inverse sine (arcsine) of <number>",
  "ATAN": "ATAN(<number>) Returns the inverse tangent (arctangent) of <number>",
  "CBOOL": "CBOOL(<expression>) Returns a boolean value for an <expression>",
  "CDATE": "CDATE(<expression>) Converts an expression into a date. CDBL(<expression>)",
  "CDBL": "CDBL(<expression>) Converts an <expression> to a double.",
  "CEILING": "CEILING(<number>) Returns the smallest integer not less than <number>. <number> = double",
  "WEEKDAY": "WEEKDAY() CINT(<expression>) Converts an expression to the",
  "CINT": "CINT(<expression>) Converts an expression to the nearest integer.",
  "ROUND": "ROUND()_CINT() COS(<number>) Returns the cosine of <number>",
  "COS": "COS(<number>) Returns the cosine of <number> COSH(<number>)",
  "COSH": "COSH(<number>) Returns the hyperbolic cosine of <number>",
  "CSTR": "CSTR(<expression>) Converts an <expression> into a character string.",
  "DISTRIBTRIANG": "DISTRIBTRIANG(<min>, <max>, <median>) Returns a random number on a",
  "EXP": "EXP(<number>) Returns the exponential value for base=<number>",
  "FLOOR": "FLOOR(<number>) Returns the largest integer less than or equal to <number>. <number> =",
  "LOG": "LOG(<number>) Returns the logarithm for base=<number>",
  "MAX": "MAX(<number-1> ... <number-n) Returns the maximum value amidst the numbers being specified.",
  "MIN": "MIN(<number-1> ... <number-n) Returns the minimum value amidst the numbers being specified.",
  "N0": "N0(<number-1>,<number-2>) Returns 0 if the absolute value of <number-1> is inferior to <number-2>",
  "POW": "POW(<number-1>, <number-2>) Returns the value of <number-1> power <number-2>",
  "RANDOM": "RANDOM(integer) Returns a random number from the range between 0 and <integer>",
  "ROUNDINGMETHOD": "ROUNDINGMETHOD(<value>, <remaining_digitals>, \"<method>\")",
  "RND": "RND() Returns a random number between 0 and 1.",
  "SIN": "SIN(<number>) Returns the sine of <number> SINH(<number>)",
  "SINH": "SINH(<number>) Returns the hyperbolic sine of <number>",
  "SQRT": "SQRT(<number>) Returns the square root of <number> refer to example:",
  "TAN": "TAN(<number>) Returns the tangent of <number> TANH(<number>)",
  "TANH": "TANH(<number>) Returns the hyperbolic tangent of <number>",
  "TOBOOL": "TOBOOL(<expression>) Returns a boolean value for an <expression>",
  "TODAT": "TODAT(<expression>) Converts an expression into a date. TODBL(<expression>)",
  "TODBL": "TODBL(<expression>) Converts an <expression> to a double.",
  "TOINT": "TOINT(<expression>) Converts an expression to an integer. TOSTR(<expression>)",
  "TOSTR": "TOSTR(<expression>) Converts an <expression> into a character string.",
  "ASC": "ASC(<char>) Returns the ASCII code of a character",
  "CHR": "CHR(<UNICODE_code>) Converts <UNICODE_code> to <char>",
  "COMPRESS": "COMPRESS(<string>) Removes all blanks from a <string>.",
  "CRLF": "CRLF() Returns WINDOWS compatible new line character",
  "FIND": "FIND(<string-1>, <string-2>) Returns the position of <string-2> in <string-1>,",
  "FORMAT": "FORMAT(<string>, <format>) Applies the <format> to the <string>",
  "INSTR": "INSTR(<string-1>, <string-2>) Returns the start position of the <string-2> within",
  "LANG": "LANG(\"<string>{f}<Frenchstring>\") Localizes the input <string> based on the application",
  "LCASE": "LCASE(<string>) Converts all letters in a <string> to lowcase",
  "LEFT": "LEFT(<string>,<length>) Returns the characters on the left of a <string>, with",
  "LEN": "LEN(<string>) Returns the length of the <string>",
  "LENGTH": "LENGTH(<string>) Returns the length of the <string>",
  "LOWCASE": "LOWCASE(<string>) Converts all letters in a <string> to lowcase",
  "LTRIM": "LTRIM(<string>) Removes all trailing blanks on the left, and returns the",
  "MID": "MID(<string>, <position>, <length>) Returns a substring of a <string>. The substring is",
  "REPLACE": "REPLACE(<string>, <string_to_replace>, <new_string>) Replaces in a <string>,",
  "RIGHT": "RIGHT(<string>, <length>) Returns the characters on the right of a <string>, with",
  "RTRIM": "RTRIM(<string>) Removes all trailing blanks on the right, and returns the",
  "SPLIT": "SPLIT(<string>, <separator>) Creates a collection of items. Comma is the default",
  "STRIP": "STRIP(<string>) Returns a character string with all leading and trailing blanks",
  "SUBSTR": "SUBSTR(<variable>, <position>, <length>) =<string> Returns TRUE | FALSE.",
  "TRIM": "TRIM(<string>) Removes all trailing blanks, and returns the trimmed",
  "UCASE": "UCASE(<string>) Converts all letters in a string to uppercase",
  "UPCASE": "UPCASE(<string>) Converts all letters in a string to uppercase",
  "GETURLWEBSITE": "GETURLWEBSITE(); PROC PRINT; PUT %MYVAR;",
  "DATEADD": "DATEADD(\"<period>\",<nb>,<date>) Adds <nb> times the",
  "DATEDIFF": "DATEDIFF() - SEMESTERENDDATE() - 2 DATEDIFF() - QuarterBegDate() - DateADD() Another example:",
  "DATESERIAL": "DATESERIAL(<year>, <month>, <day>) Returns the date",
  "DAY": "DAY(<date>) Returns the day of the",
  "DMY": "DMY() - MDY() - FORMAT() eFront Script Reference Guide - V21.0 July 10, 2023",
  "DAYOFYEAR": "DAYOFYEAR(<date>) Returns the number of the",
  "DML": "DML(<date>) Puts the date in the right",
  "YMD": "YMD() - FORMAT() DMY() - MDY() - FORMAT() PROC EXPORT - FORMAT()",
  "MDY": "MDY(<date>) Returns the month, the",
  "MONTH": "MONTH(<date>) Returns the month from a",
  "MONTHBEGDATE": "MONTHBEGDATE(<date>) Returns the first day of the",
  "MONTHENDDATE": "MONTHENDDATE(<date>) Returns the last day of the",
  "NOW": "NOW() Returns the current date",
  "QUARTER": "QUARTER(<date>) Returns the quarter that",
  "QUARTERBEGDATE": "QUARTERBEGDATE(<date>) Returns the first day of the",
  "QUARTERENDDATE": "QUARTERENDDATE(<date>) Returns the last day of the",
  "SEMESTER": "SEMESTER(<date>) Returns the semester that",
  "SEMESTERBEGDATE": "SEMESTERBEGDATE(<date>) Returns the first day of the",
  "SEMESTERENDDATE": "SEMESTERENDDATE(<date>) Returns the last day of the",
  "TICKCOUNT": "TICKCOUNT() Returns the number of",
  "TODAY": "TODAY() Returns the current date",
  "WEEKBEGDATE": "WEEKBEGDATE(<date>) Returns the first day",
  "WEEKENDDATE": "WEEKENDDATE(<date>) Returns the last day",
  "WEEKOFYEAR": "WEEKOFYEAR(<date>) Returns the number of the",
  "YEAR": "YEAR(<date>) Returns the year from a",
  "DIRECTORIES": "DIRECTORIES(<path>) Returns the number of directories being",
  "DIRECTORY": "DIRECTORY(<n>) Returns the complete path to the directory at",
  "DIRECTOR": "DIRECTOR() sends the directory at position <n> into a temporary folder,",
  "DIRECTORYNAME": "DIRECTORYNAME(<n>) Returns the name of the directory at position <n>.",
  "FILES": "FILES(<path>) Returns the number of files being associated with the",
  "FILE": "FILE(<n>) Returns the complete path to the file at position",
  "FILENAME": "FILENAME() - FILE() eFront Script Reference Guide - V21.0 July 10, 2023",
  "LINKFILES": "LINKFILES() - LINKFILE() - FILENAME() FILESEXT(<path>, <extension>)",
  "FILESEXT": "FILESEXT(<path>, <extension>) Retrieves the number of",
  "LINKFILESEXT": "LINKFILESEXT(<object_id>, <ext_1>; <ext_n>) Returns the number of",
  "LINKFILE": "LINKFILE(<n>) Returns the complete path that leads to file <n>",
  "LINKFILENAME": "LINKFILENAME(<n>) Returns the name of file <n> of the files attached",
  "MAKEDIRECTORY": "MAKEDIRECTORY(<dir>) Creates a subdirectory in the current directory,",
  "APPENDPDF": "APPENDPDF(\"<file_na me1>\",\"<file_name2>\") Appends the content of an",
  "CURRLITERAL": "CURRLITERAL(<value >, <language>, <currency>, 'centime')",
  "CONVERTCURR": "CONVERTCURR(<am ount>, <source_curr>, <target_curr>, <date>)",
  "CONVERTCURR2": "CONVERTCURR2(1,INVESTEE_FUND_CCY, MANAGED_FUND_CCY,ENTRY_DATE,\" \",CURRENCY_TABLE_IQID);",
  "COLLECTION": "COLLECTION(\"<table _name>\", \"<Column name>\")",
  "EXISTCOLUMN": "EXISTCOLUMN(\"<tabl e_name>\",\"<column_n ame>\")",
  "EXISTMACRO": "EXISTMACRO(\"<macr o_name>\") Tests the existence of a",
  "EXISTTABLE": "EXISTTABLE(\"<table_ name>\") Tests the existence of a table",
  "GETACCOUNTID": "GETACCOUNTID() Returns the unique identification number of the",
  "D": "D() Returns the ID of the specified contact.",
  "NFO": "NFO(\"<fieldname>\") Returns the user specified <fieldname> value",
  "GETCURRENTUSERINFO": "GETCURRENTUSERINFO(\"FIRSTNAME1\"); RUN; Returns: Olivier",
  "PROFILE": "PROFILE() Returns the user's current profile ID",
  "GETCURRENTUSERPROFILE": "GETCURRENTUSERPROFILE(); TRACE \"My current profile ID is: \" & %MyProfileName;",
  "PROFILESLIST": "PROFILESLIST() Not authored yet Only applies to eFront",
  "GETUSERPFOILESLIST": "GETUSERPFOILESLIST(GetUserID()); TRACE %MyProfiles; eFront Script Reference Guide - V21.0",
  "GETDBSERVER": "GETDBSERVER() Returns the DB server type Example:",
  "GETINFOREGIONID": "GETINFOREGIONID() Returns the ID of the INFO region.",
  "GETPROFILEINFO": "GETPROFILEINFO(\"< user_id>\",\" <field_name>\")",
  "ID": "ID() Returns the ID of the SHARED region",
  "GETUSERID": "GETUSERID() Returns the unique identification number of the",
  "GETUSERINFO": "GETUSERINFO(\"<use r_id>\",\" <field_name>\") For the user identified by",
  "GETUSERPROFILE": "GETUSERPROFILE(GETUSERID()) PROC EFRONTMENUS - GETUSERPROFILE - GETUSERID",
  "GUID": "GUID() Returns a unique identification number (Global",
  "LAG": "LAG(<column>) Selects the value of the preceding line.",
  "PARENT": "PARENT(<column>) eFront Script Reference Guide - V21.0 July 10, 2023",
  "LOCALIZE": "LOCALIZE(<column>) Returns the column label in the language that",
  "LOOKUPDYN": "LOOKUPDYN(\"<table_ name>\",\"<column_nam e>\",\"<code>\")",
  "NZ": "NZ(<value-1>, <value-2>) Returns <value-1> if",
  "REGISTRY": "REGISTRY(<type>, <key>, <name>) Not authored yet.",
  "SETLANGUAGE": "SETLANGUAGE(<lang uage>) Forces the language for",
  "SETPDFMETADATA": "SETPDFMETADATA(\" <file_name>\",\"<table_n ame>\",\"<key_column>\"",
  "TABLEINFO": "TABLEINFO(\"table\", \"<info>\") Returns information about",
  "TABLENCOL": "TABLENCOL(\"table\") Returns the number of columns of a data table.",
  "TABLENOBS": "TABLENOBS(table) Returns the number of rows of a data table.",
  "BETWEEN": "BETWEEN(,) NOT BETWEEN(,) 5",
  "CONVERT": "CONVERT(VARCHAR(8000),A1.FUND_INFO)FROM VCFUND A LEFT JOIN VCFUNDOTHER A1 ON A1.IQID = A.FUNDOTHER WHERE ??FILTER\"; DATA WORK.FUND;",
  "PICKID": "PICKID(VCPORTFOLIO;PORTFOLIO)\"; %PARAM ASATDATE LABEL = \"To Date:\" TYPE = DATE DEFAULT=TODAY; // NOTNULL;",
  "INSTRUMENT": "INSTRUMENT(STYLE(COLHEADER)=(WIDTH=\"200\")) INVESTOR DATE(LABEL=\"Transaction Date\")",
  "DATE": "DATE(LABEL=\"Transaction Date\") TTYPE .SUM(VAR=DUE FORMAT=\"#,##00\"LABEL=\"Amount Due\")",
  "USER_ID": "USER_ID(LABEL=\"Customer\" CONTRACT_ID .SUM(VAR = UNIT_PRICE FORMAT = P_MONEY. STYLE(TOTAL) = (FONT_FACE = \"Arial\" FONT_SIZE = \"14pt\"));",
  "PRINTCOL": "PRINTCOL(DATA)=(WIDTH=\"250px\" BORDER=\"NONE\"FONT_SIZE=\"8pt\" FONT_FACE=\"TAHOMA\"); STYLESHEET END;",
  "TABULATE": "TABULATE(TITLE) = (ALIGN=CENTER PADDING=\"8px\"); TABULATE(TITLE1) = (ALIGN=RIGHT PADDING=\"8px\"); TABULATE(DATA) = (BACKGROUND=LIGHTBLUE FOREGROUND=WHITE",
  "PRINT": "PRINT(TITLE)=(BACKGROUND=\"aqua\" FONT_WEIGHT=\"BOLD\"); PRINT(TITLE1)=(METALLIC); PRINT(GRANDTOTAL)=(FONT_WEIGHT=\"BOLD\");",
  "XPICKID": "XPICKID(SELECT CODE, LIBELLE FROM REINSTRUMENTTYPE A WHERE CLASS1 IN(2,3,4) AND CODE IN('PP','CC','ACC'))\"; eFront Script Reference Guide - V21.0",
  "IN": "IN(2,3,4) AND CODE IN('PP','CC','ACC'))\"; eFront Script Reference Guide - V21.0 July 10, 2023",
  "AY": "AY()))); RUN; 5.36.4.4. Result",
  "EF_IMG": "EF_IMG(\"LOGO\";C5:C6;\"27\";;;100\") 5.36.7.5. Result 5.36.8. GETTEMPPATH()",
  "PROC CONVERTCURR": "4.1.3. PROC CONVERTCURR step ........................................................ 92 4.1.3.1. Description ........................................................................... 92 4.1.3.2. Sy",
  "PROC DELETE": "4.1.4. PROC DELETE step ...................................................................... 94 4.1.4.1. Description ........................................................................... 94 4.",
  "PROC DIRECTCASHFLOWS": "4.1.5. PROC DIRECTCASHFLOWS step ................................................ 94 4.1.5.1. Description ........................................................................... 94 4.1.5.2. Syntax",
  "PROC EFRONTACCRUALS": "4.1.6. PROC EFRONTACCRUALS step .................................................. 97 4.1.6.1. Description ........................................................................... 97 4.1.6.2. Synta",
  "PROC EFRONTBLOB": "4.1.7. PROC EFRONTBLOB step ........................................................... 99 4.1.7.1. Description ........................................................................... 99 4.1.7.2. ",
  "PROC EFRONTDASHBOARD": "4.1.8. PROC EFRONTDASHBOARD step ............................................ 102 4.1.8.1. Description ......................................................................... 102 4.1.8.2. Syntax ...",
  "PROC EFRONTFOLDER": "4.1.9. PROC EFRONTFOLDER step .................................................... 103 4.1.9.1. Description ......................................................................... 103 4.1.9.2. Synta",
  "PROC EFRONTIMPORT": "4.1.10. PROC EFRONTIMPORT step ................................................... 105 4.1.10.1. Description ....................................................................... 105 4.1.10.2. Pre-r",
  "PROC EFRONTIMPORT_AJX": "4.1.11. PROC EFRONTIMPORT_AJX step ........................................... 106 4.1.11.1. Description ....................................................................... 106 4.1.11.2. Prerequis",
  "PROC EFRONTMAIL": "4.1.12. PROC EFRONTMAIL step ........................................................ 107 4.1.12.1. Description ....................................................................... 107 4.1.12.2. Pr",
  "PROC EFRONTMENUS": "4.1.13. PROC EFRONTMENUS step .................................................... 109 4.1.13.1. Description ....................................................................... 109 4.1.13.2. Synta",
  "PROC EFRONTPACKAGES": "4.1.14. PROC EFRONTPACKAGES step ............................................. 110 4.1.14.1. Description ....................................................................... 110 4.1.14.2. Syntax ..",
  "PROC EFRONTPROFILES": "4.1.15. PROC EFRONTPROFILES step ............................................... 113 4.1.15.1. Description ....................................................................... 113 4.1.15.2. Syntax ",
  "PROC EFRONTREGIONS": "4.1.16. PROC EFRONTREGIONS step ................................................ 114 4.1.16.1. Description ....................................................................... 114 4.1.16.2. Syntax ",
  "PROC EFRONTTABLES": "4.1.17. PROC EFRONTTABLES step ................................................... 115 4.1.17.1. Description ....................................................................... 115 4.1.17.2. Synta",
  "PROC EFRONTUSERPROFILES": "4.1.18. PROC EFRONTUSERPROFILES step ..................................... 116 4.1.18.1. Description ....................................................................... 116 eFront Script Reference",
  "PROC ERROR": "4.1.19. PROC ERROR step ................................................................... 117 4.1.19.1. Description ....................................................................... 117 4.1.19",
  "PROC EXPORTCHART": "4.1.20. PROC EXPORTCHART step ..................................................... 118 4.1.20.1. Description ....................................................................... 118 4.1.20.2. Synt",
  "PROC EXPORTEXCEL": "4.1.21. PROC EXPORTEXCEL step ..................................................... 119 4.1.21.1. Description ....................................................................... 119 4.1.21.2. Synt",
  "PROC EXPORT": "4.1.22. PROC EXPORT step ................................................................. 121 4.1.22.1. Description ....................................................................... 121 4.1.22.",
  "PROC FALIBRARY": "4.1.23. PROC FALIBRARY step ............................................................ 124 4.1.23.1. Description ....................................................................... 124 4.1.23.2.",
  "PROC FAQUERY": "4.1.24. PROC FAQUERY step ............................................................... 128 4.1.24.1. Description ....................................................................... 128 4.1.24.2",
  "PROC FORMAT": "4.1.25. PROC FORMAT step ................................................................. 131 4.1.25.1. Description ....................................................................... 131 4.1.25.",
  "PROC FUNDCASHFLOWS": "4.1.26. PROC FUNDCASHFLOWS step ............................................... 133 4.1.26.1. Description ....................................................................... 133 4.1.26.2. Syntax .",
  "PROC GCHART": "4.1.27. PROC GCHART step ................................................................. 135 4.1.27.1. Description ....................................................................... 135 4.1.27.",
  "PROC GPLOT": "4.1.28. PROC GPLOT step ................................................................... 136 4.1.28.1. Description ....................................................................... 136 4.1.28",
  "PROC MEMORY": "4.1.29. PROC MEMORY step ................................................................ 138 4.1.29.1. Description ....................................................................... 138 4.1.29.2",
  "PROC MEANS": "4.1.30. PROC MEANS step ................................................................... 139 4.1.30.1. Description ....................................................................... 139 4.1.30",
  "PROC OFFICE": "4.1.31. PROC OFFICE step .................................................................. 141 4.1.31.1. Description ....................................................................... 141 4.1.31",
  "PROC PRINT": "4.1.32. PROC PRINT step ..................................................................... 142 4.1.32.1. Description ....................................................................... 142 4.1.",
  "PROC PRINTCOL": "4.1.33. PROC PRINTCOL step ............................................................. 145 4.1.33.1. Description ....................................................................... 145 4.1.33.2.",
  "PROC PRINTFORM": "4.1.34. PROC PRINTFORM step .......................................................... 146 4.1.34.1. Description ....................................................................... 146 4.1.34.2. S",
  "PROC SENDTOIC": "4.1.35. PROC SENDTOIC step ............................................................. 148 4.1.35.1. Description ....................................................................... 148 4.1.35.2.",
  "PROC SETFILTER": "4.1.36. PROC SETFILTER step ............................................................. 151 4.1.36.1. Description ....................................................................... 151 4.1.36.2",
  "PROC SORT": "4.1.37. PROC SORT step ...................................................................... 152 4.1.37.1. Description ....................................................................... 152 eFro",
  "PROC SQLEXEC": "4.1.38. PROC SQLEXEC step ............................................................... 153 4.1.38.1. Description ....................................................................... 153 4.1.38.2",
  "PROC SQLIMPORT": "4.1.39. PROC SQLIMPORT step ........................................................... 154 4.1.39.1. Description ....................................................................... 154 4.1.39.2. ",
  "PROC SQLTABLE": "4.1.40. PROC SQLTABLE step .............................................................. 157 4.1.40.1. Description ....................................................................... 157 4.1.40.2",
  "PROC TABULATE": "4.1.41. PROC TABULATE step .............................................................. 159 4.1.41.1. Description ....................................................................... 159 4.1.41.2",
  "PROC TRANSPOSE": "4.1.42. PROC TRANSPOSE step ......................................................... 161 4.1.42.1. Description ....................................................................... 161 eFront Scrip",
  "PROC TRANSPOSE2": "4.1.43. PROC TRANSPOSE2 step ....................................................... 163 4.1.43.1. Description ....................................................................... 163 4.1.43.2. Syn",
  "PROC UPDATE": "4.1.44. PROC UPDATE step ................................................................. 164 4.1.44.1. Description ....................................................................... 164 4.1.44.",
  "PROC WSGETCOMPANYDATA": "4.1.45. PROC WSGETCOMPANYDATA ............................................... 166 4.1.45.1. Description ....................................................................... 166 4.1.45.2. Syntax ...",
  "PROC WSGETINVESTMENTDATA": "4.1.46. PROC WSGETINVESTMENTDATA .......................................... 167 4.1.46.1. Description ....................................................................... 167 4.1.46.2. Syntax .....",
  "PROC WSGETINVESTORSDATA": "4.1.47. PROC WSGETINVESTORSDATA ............................................. 168 4.1.47.1. Description ....................................................................... 168 4.1.47.2. Syntax ...",
  "PROC EXCEL": "PROC EXCEL PROC EXECSQL PROC EXPORT",
  "PROC EXECSQL": "PROC EXECSQL PROC EXPORT PROC FORMAT",
  "PROC IMPORT": "PROC IMPORT COLUMN statement INFILE statement",
  "PROC UPDATEFOLDER": "PROC UPDATEFOLDER Updates a WebEdge folder. STYLESHEET",
  "PROC EFRONTMENUSPROFILE": "PROC EFRONTMENUSPROFILE=GETUSERPROFILE(GETUSERID()); RUN; 4.1.13.3. Options",
  "PROC SQLIMPORTDATA": "PROC SQLIMPORTDATA = destination_table (</ table_options> </ options>); eFront Script Reference Guide - V21.0 July 10, 2023",
  "PROC SQLTABLEDATA": "PROC SQLTABLEDATA = table_to_export (</ table_options> </ options>); RUN; 4.1.40.3. Options",
  "PROC PROC": "PROC PROC MEANS DATA =table_to_process (</ table_options>); CLASScol_1col_n; </ subordinate statements>;",
  "PROC EFRON": "PROC EFRONtBLOB - %PARAM PROC EFRONTBLOB - DATA - CLASS - PREFIX - ID PROC EFRONTFOLDER",
  "PROC SENTTOIC": "PROC SENTTOIC PROC SENDTOIC PROC SETFILTER",
  "PROC EFRONTDASHBOARDDASHBOARD": "PROC EFRONTDASHBOARDDASHBOARD=\"Dashboard_folder\\Dashboard_name\" PAGES=\"1-3,5\"; RUN;",
  "PROC PRINTDATA": "PROC PRINTDATA=T.TABLES; RUN; eFront Script Reference Guide - V21.0",
  "PROC EXCELEXPORT": "The following examples illustrate the PROC EXCELEXPORT step, and subordinate statements: \u2022 PROC EXPORTEXCEL (1)",
  "PROC MEANSDATA": "PROC MEANSDATA=WORK.t; CLASS C; JOIN X(DELIMITER=\", \");",
  "PROC DATA": "PROC DATA=WORK.T_FUNDS; SET LIBRARY_VIEW.FV_V_FUND; RUN;",
  "PROC STYLESHEET": "The following examples illustrate the PROC STYLESHEET step, and subordinate statements: \u2022 STYLESHEET - PROC TABULATE (1)"
}