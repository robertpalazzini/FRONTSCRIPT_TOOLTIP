{
  "Proc": [
    {
      "name": "DATA",
      "description": "Creates a new data table from external files or existing tables, or builds one from scratch.\nNote: WORK tables are kept in memory only and not saved to disk.",
      "example": "DATA WORK.MYTABLE;\nSET EXISTING_TABLE;\nRUN;"
    },
    {
      "name": "PROC",
      "description": "Core FrontScript Procedure Step. Followed by STEP options.",
      "example": "PROC PRINT DATA= WORK.MYTABLE;\nRUN;"
    },    
    {
      "name": "TYPE",
      "description": "Variable or column data type. Can be BOOLEN, BYTE CHAR, DATE, DOUBLE, INTEGER, LOGICAL, LONG, REAL, STRING or  TEXT.",
      "example": "COLUMN UserName TYPE = STRING;"
    },
    {
      "name": "ODS",
      "description": "Directs output of other steps to destinations like Office, HTML, or Listings.",
      "example": "ODS HTML FILE=\"report.html\";\nPROC PRINT DATA=WORK.MYTABLE;\nRUN;\nODS HTML END;"
    },
    {
      "name": "CONVERTCURR",
      "description": "Converts currency values using specified FX rates in cubes (used in Cube programs).",
      "example": "PROC CONVERTCURR DATA=INPUT OUT=OUTPUT FXRATES=RATES\nCURRENCY_COLUMN=\"CURR\" FXRATES_CURRENCY_COLUMN=\"SRC\" FXRATES_RATE_COLUMN=\"RATE\";\nVAR AMOUNT;\nRUN;"
    },
    {
      "name": "DELETE",
      "description": "Deletes an eFront Cube cube from the server.",
      "example": "PROC DELETE DATA=WORK.MYCUBE;\nRUN;"
    },
    {
      "name": "DIRECTCASHFLOWS",
      "description": "Generates a table with direct cash flow transactions via the Calculation Engine.",
      "example": "PROC DIRECTCASHFLOWS TRANSACTIONS=(1,2,3) INSTRUMENTS=(101,102) OUT=WORK.CASHFLOWS;\nRUN;"
    },
    {
      "name": "EFRONTACCRUALS",
      "description": "Calculates accrued interest per instrument for a given date.",
      "example": "PROC EFRONTACCRUALS DATA=WORK.T_TEMP_INSTRUMENTS\nOUT=WORK.ACCRUALS_OPEN;\nID=INVESTMENTINS USEDRAFT USERECURRING DATE=\"2024-31-12\";\nRUN;"
    },
    {
      "name": "EFRONTBLOB",
      "description": "Extracts data from BLOB fields in FIA tables into a structured output.",
      "example": "PROC EFRONTBLOB DATA=\"BLOB_TABLE\" ID=\"BLOB_ID\" CLASS=\"Deal\" PATH=\"MyPath\" OUT=WORK.BLOB_OUT;\nRUN;"
    },
    {
      "name": "EFRONTDASHBOARD",
      "description": "Exports a dashboard as a PDF file.",
      "example": "PROC EFRONTDASHBOARD DASHBOARD=\"\\Dashboards\\MyBoard\" PAGES=\"1-3\";\nRUN;"
    },
    {
      "name": "EFRONTFOLDER",
      "description": "Retrieves data from a specific folder object in eFront.",
      "example": "PROC EFRONTFOLDER FOLDER=\"Deal\" ID=\"123\" PROPERTIES=\"PropertyName\";\nRUN;"
    },
    {
      "name": "EFRONTIMPORT",
      "description": "Imports data from an eFront Report table using a predefined import mask.",
      "example": "PROC EFRONTIMPORT DATA=WORK.IMPORTTABLE NAME=\"IMPORT_MASK\";\nRUN;"
    },
    {
      "name": "EFRONTIMPORT_AJX",
      "description": "Executes a specific sheet import from a registered FIA import definition.",
      "example": "PROC EFRONTIMPORT_AJX DATA=WORK.IMPORTTABLE NAME=\"IMPORT_MASK\" SHEETNAME=\"Sheet1\";\nRUN;"
    },
    {
      "name": "EFRONTMAIL",
      "description": "Sends emails using table-defined values for TO, CC, attachments, etc.",
      "example": "PROC EFRONTMAIL DATA=WORK.MAILTABLE TO=EMAIL TO SUBJECT=SUBJ BODY=TEXT;\nRUN;"
    },
    {
      "name": "EFRONTMENUS",
      "description": "Retrieves all user menus and submenus from application configuration.",
      "example": "PROC EFRONTMENUS PROFILE=GETUSERPROFILE(GETUSERID()) OUT=WORK.MENUS;\nRUN;"
    },
    {
      "name": "EFRONTPACKAGES",
      "description": "Returns details on integrated packages and options in the application.",
      "example": "PROC EFRONTPACKAGES;\nRUN;"
    },
    {
      "name": "EFRONTPROFILES",
      "description": "Retrieves user profile definitions from the application.",
      "example": "PROC EFRONTPROFILES;\nRUN;"
    },
    {
      "name": "EFRONTREGIONS",
      "description": "Retrieves user region settings and access rights.",
      "example": "PROC EFRONTREGIONS;\nRUN;"
    },
    {
      "name": "EFRONTTABLES",
      "description": "Returns metadata about data model: tables, columns, indexes, and relationships.",
      "example": "PROC EFRONTTABLES;\nRUN;"
    },
    {
      "name": "EFRONTUSERPROFILES",
      "description": "Retrieves user profile assignments in the application.",
      "example": "PROC EFRONTUSERPROFILES;\nRUN;"
    },
    {
      "name": "ERROR",
      "description": "Stops program execution and raises an error with a custom message.",
      "example": "PROC ERROR \"Something went wrong!\";\nRUN;"
    },
    {
      "name": "EXPORTCHART",
      "description": "Exports charts from Excel files as JPEG images.",
      "example": "PROC EXPORTCHART FILE=\"charts.xlsx\" OUT=WORK.CHARTS;\nRUN;"
    },
    {
      "name": "EXPORTEXCEL",
      "description": "Exports one or more tables to individual sheets of a single Excel workbook.",
      "example": "PROC EXPORTEXCEL FILE=\"output.xlsx\";\nRUN;"
    },
    {
      "name": "EXPORT",
      "description": "Exports a table or view in CSV format to disk.",
      "example": "PROC EXPORT DATA=WORK.MYTABLE FILE=\"output.csv\";\nRUN;"
    },
    {
      "name": "FALIBRARY",
      "description": "Imports tables or cubes from eFront Analytics into eFront Report.",
      "example": "PROC FALIBRARY LIBRARY=Portfolio.Cashflows;\nRUN;"
    },
    {
      "name": "FAQUERY",
      "description": "Exports the result of a QueryBuilder query into an eFront Report table.",
      "example": "PROC FAQUERY QUERY=\"SELECT * FROM Table\";\nRUN;"
    },
    {
      "name": "FORMAT",
      "description": "Creates custom formats for data display using VALUE or PICTURE definitions.",
      "example": "PROC FORMAT;\nVALUE $GENDER\n  \"M\"=\"Male\"\n  \"F\"=\"Female\";\nRUN;"
    },
    {
      "name": "FUNDCASHFLOWS",
      "description": "Extracts investor operation IDs via the Calculation Engine (fund investments).",
      "example": "PROC FUNDCASHFLOWS FUNDID=\"123\" OUT=WORK.CASH;\nRUN;"
    },
    {
      "name": "GCHART",
      "description": "Generates chart types such as pie, bar, donut from a report table.",
      "example": "PROC GCHART DATA=WORK.MYTABLE;\nVBAR CATEGORY / SUMVAR=AMOUNT;\nRUN;"
    },
    {
      "name": "GPLOT",
      "description": "Generates plot and line charts from a data table.",
      "example": "PROC GPLOT DATA=WORK.MYTABLE;\nPLOT Y*X;\nRUN;"
    },
    {
      "name": "MEMORY",
      "description": "Displays memory use for tables or unloads them.",
      "example": "PROC MEMORY;\nRUN;"
    },
    {
      "name": "MEANS",
      "description": "Calculates basic statistics like mean, sum, min, max on a table.",
      "example": "PROC MEANS DATA=WORK.MYTABLE;\nVAR VALUE;\nRUN;"
    },
    {
      "name": "OFFICE",
      "description": "Generates Office/Word/Excel/XML files using templates and input tables.",
      "example": "PROC OFFICE TEMPLATE=\"&report.docx\" DATA=WORK.MYTABLE;\nRUN;"
    },
    {
      "name": "PRINT",
      "description": "Prints tables or specific variables using a customizable layout.",
      "example": "PROC PRINT DATA=WORK.MYTABLE;\nRUN;"
    },
    {
      "name": "PRINTCOL",
      "description": "Prints a column from a table into a multi-column layout.",
      "example": "PROC PRINTCOL DATA=WORK.MYTABLE COLUMN=NAME;\nRUN;"
    },
    {
      "name": "PRINTFORM",
      "description": "Prints formatted forms using fixed layout specifications.",
      "example": "PROC PRINTFORM FORM=\"MyForm\" DATA=WORK.MYTABLE;\nRUN;"
    },
    {
      "name": "SENDTOIC",
      "description": "Sends documents to Investment Caf\u221a\u00a9 Classic (PDF, DOCX).",
      "example": "PROC SENDTOIC DATA=WORK.DOCS;\nRUN;"
    },
    {
      "name": "SETFILTER",
      "description": "Automatically filters a cube when it\u201a\u00c4\u00f4s opened in a dashboard.",
      "example": "PROC SETFILTER DATA=WORK.MYCUBE FILTER=\"YEAR=2023\";\nRUN;"
    },
    {
      "name": "SORT",
      "description": "Sorts tables by one or more character/numeric columns.",
      "example": "PROC SORT DATA=WORK.MYTABLE;\nBY NAME;\nRUN;"
    },
    {
      "name": "SQLEXEC",
      "description": "Executes SQL queries against an external database.",
      "example": "PROC SQLEXEC CONNECTION=\"DB_CONN\" SQL=\"SELECT * FROM customers\";\nRUN;"
    },
    {
      "name": "SQLIMPORT",
      "description": "Imports external SQL query results into an eFront Report table.",
      "example": "PROC SQLIMPORT CONNECTION=\"DB_CONN\" SQL=\"SELECT * FROM orders\" OUT=WORK.ORDERS;\nRUN;"
    },
    {
      "name": "SQLTABLE",
      "description": "Exports eFront Report table data to an external SQL database.",
      "example": "PROC SQLTABLE DATA=WORK.MYTABLE CONNECTION=\"DB_CONN\" TABLE=\"target_table\";\nRUN;"
    },
    {
      "name": "TABULATE",
      "description": "Creates pivot tables and computes statistics grouped by dimensions.",
      "example": "PROC TABULATE DATA=WORK.MYTABLE;\nCLASS REGION;\nVAR SALES;\nTABLE REGION, SALES*SUM;\nRUN;"
    },
    {
      "name": "TRANSPOSE",
      "description": "Transposes column values into rows in an output table.",
      "example": "PROC TRANSPOSE DATA=WORK.MYTABLE OUT=WORK.TRANSPOSED;\nRUN;"
    },
    {
      "name": "TRANSPOSE2",
      "description": "Reshapes table by turning variable values into new columns.",
      "example": "PROC TRANSPOSE2 DATA=WORK.MYTABLE OUT=WORK.PIVOTED;\nRUN;"
    },
    {
      "name": "UPDATE",
      "description": "Performs high-performance merging of two cubes (left join style).",
      "example": "PROC UPDATE DATA=WORK.BASE OUT=WORK.UPDATED;\nBY ID;\nRUN;"
    },
    {
      "name": "WPROC SGETCOMPANYDATA",
      "description": "Calls a web service to retrieve company data (limited use).",
      "example": "PROC WSGETCOMPANYDATA COMPANYID=123 OUT=WORK.COMPANY;\nRUN;"
    },
    {
      "name": "WSGETINVESTMENTDATA",
      "description": "Calls a web service to retrieve investment data.",
      "example": "PROC WSGETINVESTMENTDATA ID=456 OUT=WORK.INVESTMENT;\nRUN;"
    },
    {
      "name": "WSGETINVESTORSDATA",
      "description": "Calls a web service to retrieve investor data.",
      "example": "PROC WSGETINVESTORSDATA ID=789 OUT=WORK.INVESTORS;\nRUN;"
    },
    {
      "name": "STYLESHEET",
      "description": "Defines style instructions (e.g., for charts or table elements).",
      "example": "PROC STYLESHEET FILE=\"style.css\";\nRUN;"
    },
    {
      "name": "TABLE",
      "description": "Writes report outputs into HTML table layout.",
      "example": "PROC TABLE DATA=WORK.MYTABLE;\nRUN;"
    }
  ],
  "Macro": [
    {
      "name": "DEFINE",
      "description": "Macro Function. Declares a macro variable and assigns it a value.",
      "example": "%DEFINE name = 'John';"
    },
    {
      "name": "INCLUDE",
      "description": "Macro Function. Includes the contents of an external FrontScript file.",
      "example": "%INCLUDE \"\\Shared\\Scripts\\P_MyProgram\";"
    },
    {
      "name": "LET",
      "description": "Macro Function. Assigns a value to a macro variable.",
      "example": "%LET startDate = '2023-01-01';"
    },
    {
      "name": "PARAM",
      "description": "Macro Function. Declares a macro parameter for dynamic input.",
      "example": "%PARAM EXCLUDEDRAFT LABEL \"Exclude Draft transactions?\" TYPE= BOOLEAN;"
    }
  ],
  "Keyword": [
    {
      "name": "DO",
      "description": "Begins a code block or loop.\n\nCan be Macro (%) function too.",
      "example": "DO;\n  x = x + 1;\nEND;"
    },
    {
      "name": "WHILE",
      "description": "Starts a loop that continues while a condition is true.\n\nCan be Macro (%) function too.",
      "example": "DO WHILE (x < 10);\n  x = x + 1;\nEND;"
    },
    {
      "name": "LOOP",
      "description": "Marks the body of a WHILE or FOR loop.\n\nCan be Macro (%) function too.",
      "example": "%LET I = 1;\n%DO WHILE (%I <= 5)\n  PUT %I;\n  %LET I = %I + 1;\n%LOOP;"
    },
    {
      "name": "IF",
      "description": "Executes a block of code if a condition is true.\n\nCan be Macro (%) function too.",
      "example": "IF amount > 1000 THEN PUT 'Large';"
    },
    {
      "name": "THEN",
      "description": "Follows an IF condition to specify the block to execute if true.\n\nCan be Macro (%) function too.",
      "example": "IF status = 'ACTIVE' THEN output = 1;"
    },
    {
      "name": "ELSE",
      "description": "Specifies an alternate block to execute if the IF condition is false.\n\nCan be Macro (%) function too.",
      "example": "IF x = 1 THEN y = 'Yes'; ELSE y = 'No';"
    },
    {
      "name": "ELSEIF",
      "description": "Specifies an alternate block to execute if the IF condition is false.\n\nCan be Macro (%) function too.",
      "example": "IF x = 1 THEN y = 'Yes'; ELSEIF x = 0 then y= 'No'; END; ;"
    },    {
      "name": "END",
      "description": "Closes a block of code (e.g., IF, DO, SELECT).\n\nCan be Macro (%) function too.",
      "example": "DO;\n  PUT 'Hello';\nEND;"
    },
    {
      "name": "SELECT",
      "description": "Begins a conditional branching block, like a switch statement.\n\nCan be Macro (%) function too.",
      "example": "SELECT type;\n  WHEN 'A' DO;\n    PUT 'Alpha';\n  END;\nEND;"
    },
    {
      "name": "WHEN",
      "description": "Defines a specific condition inside a SELECT block.\n\nCan be Macro (%) function too.",
      "example": "SELECT status;\n  WHEN 'Open' DO;\n    PUT 'Open Case';\n  END;\nEND;"
    },
    {
      "name": "CASE",
      "description": "Defines a value or condition in a switch-style structure (sometimes used interchangeably with WHEN).\n\nCan be Macro (%) function too.",
      "example": "SELECT value;\n  CASE 1 DO;\n    PUT 'One';\n  END;\nEND;"
    },
    {
      "name": "DEFAULT",
      "description": "Defines the default block to execute in a SELECT if no WHEN condition is matched.",
      "example": "SELECT x;\n  WHEN 1 PUT 'One';\n  DEFAULT PUT 'Other';\nEND;"
    },
    {
      "name": "BREAK",
      "description": "Exits the current loop or SELECT structure.\n\nCan be Macro (%) function too.",
      "example": "DO WHILE (x < 10);\n  IF x = 5 THEN BREAK;\n  x = x + 1;\nEND;"
    },
    {
      "name": "CONTINUE",
      "description": "Skips the rest of the current iteration of a loop and begins the next iteration.\n\nCan be Macro (%) function too.",
      "example": "DO WHILE (x < 10);\n  x = x + 1;\n  IF x = 5 THEN CONTINUE;\n  PUT x;\nEND;"
    },
    {
      "name": "RETURN",
      "description": "Exits the current program or function and optionally returns a value.",
      "example": "IF error = 1 THEN RETURN;"
    },
    {
      "name": "RUN",
      "description": "Executes a PROC or DATA step.",
      "example": "PROC SORT DATA=work.table;\nBY name;\nRUN;"
    },
    {
      "name": "STOP",
      "description": "Terminates the program immediately.",
      "example": "IF x > 100 THEN STOP;"
    },
    {
      "name": "ABORT",
      "description": "Stops program execution with an error.",
      "example": "IF status = 'FAIL' THEN ABORT;"
    },
    {
      "name": "MERGE",
      "description": "Combines datasets based on key variables.",
      "example": "MERGE a(IN=a) b(IN=b);\nBY id;"
    },
    {
      "name": "SET",
      "description": "Reads data into a DATA step from an existing table.",
      "example": "SET transactions;\namount = amount * 1.1;"
    },
    {
      "name": "SQL",
      "description": "Introduces an SQL code block inside a program.",
      "example": "SQL {\n  SELECT * FROM users;\n};"
    },
    {
      "name": "INFILE",
      "description": "Reads data from an external file line by line.",
      "example": "INFILE 'data.csv' DLM=',';"
    },
    {
      "name": "INLINE",
      "description": "Defines inline data directly within a script.",
      "example": "DATA work.inline;\nINLINE;\n1 John\n2 Alice\nRUN;"
    },
    {
      "name": "OUTPUT",
      "description": "Writes a data row to the output table.",
      "example": "OUTPUT;"
    },
    {
      "name": "COLUMN",
      "description": "Defines a column to be printed or used in a table layout.",
      "example": "COLUMN name age salary;"
    },
    {
      "name": "FORMAT",
      "description": "Applies a user-defined format to variables.",
      "example": "FORMAT salary dollar12.2;"
    },
    {
      "name": "TABLE",
      "description": "Defines the structure or layout of an output table.",
      "example": "PROC TABLE DATA=work.summary;\nRUN;"
    },
    {
      "name": "TITLE",
      "description": "Adds a title to output listings or reports.",
      "example": "TITLE 'Summary Report';"
    },
    {
      "name": "TRACE",
      "description": "Outputs debug information or execution trace.",
      "example": "TRACE 'Step 1 completed';"
    },
    {
      "name": "VAR",
      "description": "Defines variables for analysis or output.",
      "example": "VAR sales profit;"
    },
    {
      "name": "SUM",
      "description": "Specifies a variable to be summed in statistics or MEANS table.",
      "example": "SUM FEES  (NAME = FEES LABEL = \"Fees\");"
    },
    {
      "name": "MEAN",
      "description": "Specifies a variable for which the average is computed.",
      "example": "MEAN salary;"
    },
    {
      "name": "MAX",
      "description": "Specifies a variable for which the maximum value is computed.",
      "example": "MAX temperature;"
    },
    {
      "name": "MIN",
      "description": "Specifies a variable for which the minimum value is computed.",
      "example": "MIN humidity;"
    },
    {
      "name": "JOIN",
      "description": "Combines tables based on key fields (SQL style).",
      "example": "PROC SQL;\nSELECT * FROM a JOIN b ON a.id = b.id;\nQUIT;"
    },
    {
      "name": "FIRST",
      "description": "Refers to the first record in a BY group.",
      "example": "IF FIRST.name THEN counter = 0;"
    },
    {
      "name": "LAST",
      "description": "Refers to the last record in a BY group.",
      "example": "IF LAST.name THEN PUT 'End of group';"
    },
    {
      "name": "NOBS",
      "description": "Returns the number of observations in a table.",
      "example": "IF _N_ = 1 THEN SET data NOBS=n;"
    },
    {
      "name": "VALUE",
      "description": "Assigns or retrieves a formatted value.",
      "example": "VALUE $gender\n  'M'='Male'\n  'F'='Female';"
    },
    {
      "name": "VBAR",
      "description": "Generates a vertical bar chart.",
      "example": "PROC GCHART DATA=work.sales;\nVBAR product / SUMVAR=revenue;\nRUN;"
    },
    {
      "name": "HBAR",
      "description": "Generates a horizontal bar chart.",
      "example": "PROC GCHART DATA=work.sales;\nHBAR region / SUMVAR=sales;\nRUN;"
    },
    {
      "name": "PIE",
      "description": "Generates a pie chart.",
      "example": "PROC GCHART DATA=work.sales;\nPIE category;\nRUN;"
    },
    {
      "name": "DONUT",
      "description": "Generates a donut chart.",
      "example": "PROC GCHART DATA=work.sales;\nDONUT category;\nRUN;"
    },
    {
      "name": "PRINT",
      "description": "Prints the contents of a dataset or report.",
      "example": "PROC PRINT DATA=work.table;\nRUN;"
    },
    {
      "name": "ODS",
      "description": "Directs output to destinations like HTML, RTF, or Excel.",
      "example": "ODS HTML FILE='report.html';\nRUN;"
    },
    {
      "name": "EXPORT",
      "description": "Exports data to a file format (CSV, Excel, etc.).",
      "example": "PROC EXPORT DATA=work.table OUTFILE='output.csv';\nRUN;"
    },
    {
      "name": "SORT",
      "description": "Sorts a dataset by one or more variables.",
      "example": "PROC SORT DATA=work.table;\nBY date;\nRUN;"
    },
    {
      "name": "UPDATE",
      "description": "Updates an existing dataset with new values.",
      "example": "UPDATE base SET salary = salary * 1.05 WHERE dept = 'HR';"
    },
    {
      "name": "BY",
      "description": "Specifies grouping criteria for procedures like SORT or MEANS.",
      "example": "BY region;"
    },
    {
      "name": "CLASS",
      "description": "Defines classification variables in procedures like TABULATE.",
      "example": "CLASS department;"
    },
    {
      "name": "LIBNAME",
      "description": "Declares a library reference (libref) to a directory or database.",
      "example": "LIBNAME mylib 'C:\\data';"
    },
    {
      "name": "PUT",
      "description": "Writes a message or variable value to the log/output stream.",
      "example": "PUT 'Processing complete';"
    },
    {
      "name": "FOR",
      "description": "Begins a counted loop that runs from a start value to an end value.",
      "example": "FOR I = 1 TO 5;\n  PUT I;\nEND;"
    },
    {
      "name": "NEXT",
      "description": "Ends the current iteration of a FOR loop and begins the next one.",
      "example": "FOR I = 1 TO 3;\n  PUT I;\nNEXT;"
    },
    {
      "name": "WHERE",
      "description": "Applies a conditional filter to rows in procedures or data steps.",
      "example": "SET transactions;\nWHERE amount > 1000;"
    },    
    {
      "name": "KEEP",
      "description": "Applies a conditional filter to columns in procedures or data steps.",
      "example": "SET transactions (KEEP = Col1 Col2);"
    },
   {
      "name": "DROP",
      "description": "Applies a conditional filter to remove colmns in procedures or data steps.",
      "example": "SET transactions (DROP = Colx Coly);"
    }
  ],
  "Function": [
    {
      "name": "ABS",
      "description": "Returns the absolute (non-negative) value of a number.",
      "example": "ABS(-10) => 10"
    },
    {
      "name": "ACOS",
      "description": "Returns the arccosine of a value, in radians.",
      "example": "ACOS(1) => 0"
    },
    {
      "name": "ASIN",
      "description": "Returns the arcsine of a value, in radians.",
      "example": "ASIN(0) => 0"
    },
    {
      "name": "ATAN",
      "description": "Returns the arctangent of a value, in radians.",
      "example": "ATAN(1) => 0.7854"
    },
    {
      "name": "CBOOL",
      "description": "Converts a value to a Boolean (TRUE/FALSE).",
      "example": "CBOOL(1) => TRUE"
    },
    {
      "name": "CDATE",
      "description": "Converts a value to a date type.",
      "example": "CDATE('2024-12-31') => 31DEC2024"
    },
    {
      "name": "CDBL",
      "description": "Converts a value to a floating-point number.",
      "example": "CDBL('3.14') => 3.14"
    },
    {
      "name": "CEILING",
      "description": "Rounds a number up to the nearest integer.",
      "example": "CEILING(3.2) => 4"
    },
    {
      "name": "CINT",
      "description": "Converts a value to an integer.",
      "example": "CINT(2.8) => 3"
    },
    {
      "name": "COS",
      "description": "Returns the cosine of a number (in radians).",
      "example": "COS(0) => 1"
    },
    {
      "name": "COSH",
      "description": "Returns the hyperbolic cosine of a number.",
      "example": "COSH(0) => 1"
    },
    {
      "name": "CSTR",
      "description": "Converts a value to a string.",
      "example": "CSTR(123) => '123'"
    },
    {
      "name": "DISTRIBNORM",
      "description": "Returns a value from a normal distribution.",
      "example": "DISTRIBNORM(0, 1) => random normal value"
    },
    {
      "name": "DISTRIBTRIANG",
      "description": "Returns a value from a triangular distribution.",
      "example": "DISTRIBTRIANG(1, 5, 10) => random value"
    },
    {
      "name": "E",
      "description": "Returns Euler\u201a\u00c4\u00f4s number (~2.718).",
      "example": "E() => 2.718281828"
    },
    {
      "name": "EXP",
      "description": "Returns e raised to the power of a number.",
      "example": "EXP(1) => 2.718281828"
    },
    {
      "name": "FLOOR",
      "description": "Rounds a number down to the nearest integer.",
      "example": "FLOOR(3.8) => 3"
    },
    {
      "name": "LOG",
      "description": "Returns the natural logarithm of a number.",
      "example": "LOG(2.71828) => 1"
    },
    {
      "name": "LOG10",
      "description": "Returns the base-10 logarithm of a number.",
      "example": "LOG10(1000) => 3"
    },
    {
      "name": "MAX",
      "description": "Returns the maximum value among arguments.",
      "example": "MAX(3, 8, 5) => 8"
    },
    {
      "name": "MIN",
      "description": "Returns the minimum value among arguments.",
      "example": "MIN(3, 8, 5) => 3"
    },
    {
      "name": "N0",
      "description": "Converts a number to integer format (no decimals).",
      "example": "N0(4.7) => 5"
    },
    {
      "name": "PI",
      "description": "Returns the value of pi (~3.14159).",
      "example": "PI() => 3.14159265359"
    },
    {
      "name": "POW",
      "description": "Raises a number to the power of another number.",
      "example": "POW(2, 3) => 8"
    },
    {
      "name": "RANDOM",
      "description": "Returns a random number between 0 and 1.",
      "example": "RANDOM() => 0.832 (varies)"
    },
    {
      "name": "ROUND",
      "description": "Rounds a number to the specified number of digits.",
      "example": "ROUND(3.14159, 2) => 3.14"
    },
    {
      "name": "ROUNDINGMETHOD",
      "description": "Specifies the method to be used in rounding operations.",
      "example": "ROUNDINGMETHOD('NEAREST')"
    },
    {
      "name": "RND",
      "description": "Alias for RANDOM.",
      "example": "RND() => 0.123 (varies)"
    },
    {
      "name": "SIN",
      "description": "Returns the sine of a number (in radians).",
      "example": "SIN(PI()/2) => 1"
    },
    {
      "name": "SINH",
      "description": "Returns the hyperbolic sine of a number.",
      "example": "SINH(0) => 0"
    },
    {
      "name": "SQRT",
      "description": "Returns the square root of a number.",
      "example": "SQRT(16) => 4"
    },
    {
      "name": "TAN",
      "description": "Returns the tangent of a number (in radians).",
      "example": "TAN(0) => 0"
    },
    {
      "name": "TANH",
      "description": "Returns the hyperbolic tangent of a number.",
      "example": "TANH(0) => 0"
    },
    {
      "name": "TOBOOL",
      "description": "Converts a value to Boolean.",
      "example": "TOBOOL('True') => TRUE"
    },
    {
      "name": "TODAT",
      "description": "Converts a string to a date format.",
      "example": "TODAT('2024-01-01') => 01JAN2024"
    },
    {
      "name": "TODBL",
      "description": "Converts a value to a double.",
      "example": "TODBL('3.5') => 3.5"
    },
    {
      "name": "TOINT",
      "description": "Converts a value to an integer.",
      "example": "TOINT(3.7) => 4"
    },
    {
      "name": "TOSTR",
      "description": "Converts a value to a string.",
      "example": "TOSTR(1234) => '1234'"
    },
    {
      "name": "ASC",
      "description": "Returns the ASCII code of the first character of a string.",
      "example": "ASC('A') => 65"
    },
    {
      "name": "CHR",
      "description": "Returns the character corresponding to the specified ASCII code.",
      "example": "CHR(65) => 'A'"
    },
    {
      "name": "COMPRESS",
      "description": "Removes all spaces from a string.",
      "example": "COMPRESS('a b c') => 'abc'"
    },
    {
      "name": "CRLF",
      "description": "Returns a carriage return and line feed combination.",
      "example": "CRLF() => '\\r\\n'"
    },
    {
      "name": "FIND",
      "description": "Returns the position of a substring within a string.",
      "example": "FIND('cat', 'catalog') => 1"
    },
    {
      "name": "FORMAT",
      "description": "Applies a custom format to a value.",
      "example": "FORMAT(1234.5, 'N2') => '1,234.50'"
    },
    {
      "name": "INSTR",
      "description": "Returns the position of one string within another.",
      "example": "INSTR('hello', 'e') => 2"
    },
    {
      "name": "LANG",
      "description": "Returns the current language code.",
      "example": "LANG() => 'EN'"
    },
    {
      "name": "LCASE",
      "description": "Converts all characters of a string to lowercase.",
      "example": "LCASE('HELLO') => 'hello'"
    },
    {
      "name": "LEFT",
      "description": "Returns the leftmost characters of a string.",
      "example": "LEFT('abcdef', 3) => 'abc'"
    },
    {
      "name": "LEN",
      "description": "Returns the length of a string.",
      "example": "LEN('hello') => 5"
    },
    {
      "name": "LENGTH",
      "description": "Alias for LEN.",
      "example": "LENGTH('hello') => 5"
    },
    {
      "name": "LOWCASE",
      "description": "Alias for LCASE.",
      "example": "LOWCASE('ABC') => 'abc'"
    },
    {
      "name": "LTRIM",
      "description": "Removes leading spaces from a string.",
      "example": "LTRIM('  hello') => 'hello'"
    },
    {
      "name": "MID",
      "description": "Returns a substring from a string starting at a specified position.",
      "example": "MID('abcdef', 2, 3) => 'bcd'"
    },
    {
      "name": "REPLACE",
      "description": "Replaces all occurrences of a substring with another substring.",
      "example": "REPLACE('cat', 'a', 'o') => 'cot'"
    },
    {
      "name": "RIGHT",
      "description": "Returns the rightmost characters of a string.",
      "example": "RIGHT('abcdef', 3) => 'def'"
    },
    {
      "name": "RTRIM",
      "description": "Removes trailing spaces from a string.",
      "example": "RTRIM('hello  ') => 'hello'"
    },
    {
      "name": "SPLIT",
      "description": "Splits a string into parts based on a delimiter.",
      "example": "SPLIT('a,b,c', ',') => ['a', 'b', 'c']"
    },
    {
      "name": "STRIP",
      "description": "Removes leading and trailing spaces from a string.",
      "example": "STRIP('  hello ') => 'hello'"
    },
    {
      "name": "SUBSTR",
      "description": "Returns a portion of a string (substring).",
      "example": "SUBSTR('abcdef', 2, 3) => 'bcd'"
    },
    {
      "name": "TRIM",
      "description": "Removes leading and trailing whitespace from a string.",
      "example": "TRIM('  abc  ') => 'abc'"
    },
    {
      "name": "UCASE",
      "description": "Converts a string to uppercase.",
      "example": "UCASE('hello') => 'HELLO'"
    },
    {
      "name": "UPCASE",
      "description": "Alias for UCASE.",
      "example": "UPCASE('hello') => 'HELLO'"
    },
    {
      "name": "DATEADD",
      "description": "Adds a time interval to a date.",
      "example": "DATEADD('2024-01-01', 'd', 10) => '2024-01-11'"
    },
    {
      "name": "DATEDIFF",
      "description": "Returns the difference between two dates.",
      "example": "DATEDIFF('2024-01-01', '2024-01-10') => 9"
    },
    {
      "name": "DATESERIAL",
      "description": "Returns a date from specified year, month, and day.",
      "example": "DATESERIAL(2024, 1, 15) => '2024-01-15'"
    },
    {
      "name": "DAY",
      "description": "Returns the day of the month from a date.",
      "example": "DAY('2024-01-15') => 15"
    },
    {
      "name": "DMY",
      "description": "Creates a date from day, month, and year values.",
      "example": "DMY(15, 1, 2024) => '2024-01-15'"
    },
    {
      "name": "MDY",
      "description": "Creates a date from month, day, and year values.",
      "example": "MDY(1, 15, 2024) => '2024-01-15'"
    },
    {
      "name": "MONTH",
      "description": "Returns the month from a date.",
      "example": "MONTH('2024-01-15') => 1"
    },
    {
      "name": "QUARTER",
      "description": "Returns the quarter of the year for a date.",
      "example": "QUARTER('2024-05-10') => 2"
    },
    {
      "name": "QUARTERBEGDATE",
      "description": "Returns the first day of the quarter for a given date.",
      "example": "QUARTERBEGDATE('2024-05-10') => '2024-04-01'"
    },
    {
      "name": "SEMESTERENDDATE",
      "description": "Returns the last day of the semester for a given date.",
      "example": "SEMESTERENDDATE('2024-05-10') => '2024-06-30'"
    },
    {
      "name": "WEEKBEGDATE",
      "description": "Returns the first day of the week for a given date.",
      "example": "WEEKBEGDATE('2024-01-15') => '2024-01-15'"
    },
    {
      "name": "WEEKDAY",
      "description": "Returns the day of the week (1\u201a\u00c4\u00ec7) from a date.",
      "example": "WEEKDAY('2024-01-15') => 2"
    },
    {
      "name": "WEEKENDDATE",
      "description": "Returns the last day of the week for a given date.",
      "example": "WEEKENDDATE('2024-01-15') => '2024-01-21'"
    },
    {
      "name": "WEEKOFYEAR",
      "description": "Returns the week number of the year for a date.",
      "example": "WEEKOFYEAR('2024-01-15') => 3"
    },
    {
      "name": "YEAR",
      "description": "Returns the year part of a date.",
      "example": "YEAR('2024-01-15') => 2024"
    },
    {
      "name": "YEARBEGDATE",
      "description": "Returns the first day of the year for a given date.",
      "example": "YEARBEGDATE('2024-01-15') => '2024-01-01'"
    },
    {
      "name": "YEARENDDATE",
      "description": "Returns the last day of the year for a given date.",
      "example": "YEARENDDATE('2024-01-15') => '2024-12-31'"
    },
    {
      "name": "YMD",
      "description": "Creates a date from year, month, and day values.",
      "example": "YMD(2024, 1, 15) => '2024-01-15'"
    },
    {
      "name": "DIRECTORIES",
      "description": "Returns a list of directory names in a given path.",
      "example": "DIRECTORIES('C:\\temp') => ['sub1', 'sub2']"
    },
    {
      "name": "DIRECTORY",
      "description": "Returns the name of a directory.",
      "example": "DIRECTORY('C:\\temp\\file.txt') => 'C:\\temp'"
    },
    {
      "name": "DIRECTORYNAME",
      "description": "Returns the directory portion of a file path.",
      "example": "DIRECTORYNAME('C:\\temp\\file.txt') => 'temp'"
    },
    {
      "name": "FILES",
      "description": "Returns a list of file names in a directory.",
      "example": "FILES('C:\\temp') => ['a.txt', 'b.doc']"
    },
    {
      "name": "FILE",
      "description": "Returns a file object by path.",
      "example": "FILE('C:\\temp\\file.txt')"
    },
    {
      "name": "FILENAME",
      "description": "Returns the name of a file from its path.",
      "example": "FILENAME('C:\\temp\\file.txt') => 'file.txt'"
    },
    {
      "name": "FILESEXT",
      "description": "Returns the extension of a file.",
      "example": "FILESEXT('report.xlsx') => 'xlsx'"
    },
    {
      "name": "LINKFILES",
      "description": "Returns the list of linked files for a folder.",
      "example": "LINKFILES('Deal', 123) => ['doc1.pdf']"
    },
    {
      "name": "LINKFILE",
      "description": "Returns a linked file object.",
      "example": "LINKFILE('Deal', 123, 'doc1.pdf')"
    },
    {
      "name": "LINKFILENAME",
      "description": "Returns the name of a linked file.",
      "example": "LINKFILENAME('Deal', 123, 0) => 'doc1.pdf'"
    },
    {
      "name": "LINKFILESEXT",
      "description": "Returns the extension of a linked file.",
      "example": "LINKFILESEXT('Deal', 123, 0) => 'pdf'"
    },
    {
      "name": "MAKEDIRECTORY",
      "description": "Creates a new directory at a specified path.",
      "example": "MAKEDIRECTORY('C:\\newfolder')"
    },
    {
      "name": "APPENDPDF",
      "description": "Appends one PDF file to another.",
      "example": "APPENDPDF('main.pdf', 'appendix.pdf')"
    },
    {
      "name": "CURRLITERAL",
      "description": "Returns the literal name of a currency.",
      "example": "CURRLITERAL('USD') => 'US Dollar'"
    },
    {
      "name": "CONVERTCURR",
      "description": "Converts an amount from one currency to another using cube FX rates.",
      "example": "CONVERTCURR(100, 'USD', 'EUR', '2024-01-01')"
    },
    {
      "name": "CONVERTCURR2",
      "description": "Converts currencies using cube FX rates with dynamic options.",
      "example": "CONVERTCURR2(100, 'USD', 'EUR', '2024-01-01', 'avg')"
    },
    {
      "name": "COLLECTION",
      "description": "Returns a collection of items matching criteria.",
      "example": "COLLECTION('Deal', 'Status=Active') => [123, 124]"
    },
    {
      "name": "EXISTCOLUMN",
      "description": "Checks if a column exists in a table.",
      "example": "EXISTCOLUMN('Deals', 'Status') => TRUE"
    },
    {
      "name": "EXISTMACRO",
      "description": "Checks if a macro variable exists.",
      "example": "EXISTMACRO('%FundID') => TRUE"
    },
    {
      "name": "EXISTTABLE",
      "description": "Checks if a table exists in memory or on disk.",
      "example": "EXISTTABLE('WORK.MYTABLE') => TRUE"
    },
    {
      "name": "GETTEMPPATH",
      "description": "Returns the path to the temporary folder.",
      "example": "GETTEMPPATH() => 'C:\\Temp'"
    },
    {
      "name": "GETACCOUNTID",
      "description": "Returns the account ID of the current user.",
      "example": "GETACCOUNTID() => 'AC12345'"
    },
    {
      "name": "GETUSERID",
      "description": "Returns the ID of the current user.",
      "example": "GETUSERID() => 'USR001'"
    },
    {
      "name": "GETUSERINFO",
      "description": "Returns user metadata as a string.",
      "example": "GETUSERINFO('email') => 'user@example.com'"
    },
    {
      "name": "GETURLWEBSITE",
      "description": "Returns the full URL of the current web application.",
      "example": "GETURLWEBSITE() => 'https://app.efront.com'"
    },
    {
      "name": "CDATE",
      "description": "Converts an expression into a date.",
      "example": "CDATE(\"2024-12-31\") => 31DEC2024"
    },
    {
      "name": "DAYOFYEAR",
      "description": "Returns the day number in the year (1 = Jan 1).",
      "example": "DAYOFYEAR(\"18/07/2006\") => 199"
    },
    {
      "name": "DML",
      "description": "Formats a date value into SQL Server-compatible format.",
      "example": "DML(\"31/12/2016\") => '2016-12-31'"
    },
    {
      "name": "FORMAT",
      "description": "Applies a format to a value, including dates.",
      "example": "FORMAT(TODAY(), \"d/M/yyyy\") => '25/7/2025'"
    },
    {
      "name": "MONTHBEGDATE",
      "description": "Returns the first day of the month for a given date.",
      "example": "MONTHBEGDATE(\"2024-05-15\") => '2024-05-01'"
    },
    {
      "name": "MONTHENDDATE",
      "description": "Returns the last day of the month for a given date.",
      "example": "MONTHENDDATE(\"2024-05-15\") => '2024-05-31'"
    },
    {
      "name": "NOW",
      "description": "Returns the current date and time.",
      "example": "NOW() => '2025-07-25 10:30:00'"
    },
    {
      "name": "QUARTERENDDATE",
      "description": "Returns the last day of the quarter for a given date.",
      "example": "QUARTERENDDATE(\"2024-05-15\") => '2024-06-30'"
    },
    {
      "name": "SEMESTER",
      "description": "Returns the semester number (1 or 2) of the year.",
      "example": "SEMESTER(\"19/08/2017\") => 2"
    },
    {
      "name": "SEMESTERBEGDATE",
      "description": "Returns the first day of the semester for a given date.",
      "example": "SEMESTERBEGDATE(\"24/01/2024\") => '01/01/2024'"
    },
    {
      "name": "TODAY",
      "description": "Returns today\u2019s date.",
      "example": "TODAY() => '2025-07-25'"
    },
    {
      "name": "TICKCOUNT",
      "description": "Returns the number of milliseconds since system start.",
      "example": "TICKCOUNT() => 130209282"
    }
  ]
}
